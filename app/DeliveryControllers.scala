/**
  * Generated by API Builder - https://www.apibuilder.io
  * Service version: 1.0.1
  * apibuilder app.apibuilder.io/nashtech/delivery/latest/play_2_6_controllers
  */
package com.nashtech.delivery.v1.controllers

import com.nashtech.delivery.v1.models.json._

trait DeliveriesController extends play.api.mvc.BaseController {

  sealed trait GetById extends Product with Serializable
  object GetById {
    final case class HTTP200(body: com.nashtech.delivery.v1.models.Delivery) extends GetById
    case object HTTP401 extends GetById
    case object HTTP404 extends GetById
    final case class Undocumented(result: play.api.mvc.Result) extends GetById
  }

  def getById(
      request: play.api.mvc.Request[play.api.mvc.AnyContent],
      merchantId: String,
      id: String
  ): scala.concurrent.Future[GetById]
  final def getById(merchantId: String, id: String): play.api.mvc.Action[play.api.mvc.AnyContent] = Action.async {
    request =>
      getById(request, merchantId, id)
        .map {
          case r: GetById.HTTP200      => Status(200)(play.api.libs.json.Json.toJson(r.body))
          case GetById.HTTP401         => Status(401)(play.api.mvc.Results.EmptyContent())
          case GetById.HTTP404         => Status(404)(play.api.mvc.Results.EmptyContent())
          case r: GetById.Undocumented => r.result
        }(defaultExecutionContext)
  }

  sealed trait Post extends Product with Serializable
  object Post {
    final case class HTTP200(body: com.nashtech.delivery.v1.models.Delivery) extends Post
    case object HTTP401 extends Post
    case object HTTP404 extends Post
    final case class HTTP422(body: com.nashtech.delivery.v1.models.Error) extends Post
    final case class Undocumented(result: play.api.mvc.Result) extends Post
  }

  def post(
      request: play.api.mvc.Request[com.nashtech.delivery.v1.models.DeliveryForm],
      merchantId: String,
      body: com.nashtech.delivery.v1.models.DeliveryForm
  ): scala.concurrent.Future[Post]
  final def post(merchantId: String): play.api.mvc.Action[com.nashtech.delivery.v1.models.DeliveryForm] =
    Action.async(parse.json[com.nashtech.delivery.v1.models.DeliveryForm]) { request =>
      post(request, merchantId, request.body)
        .map {
          case r: Post.HTTP200      => Status(200)(play.api.libs.json.Json.toJson(r.body))
          case Post.HTTP401         => Status(401)(play.api.mvc.Results.EmptyContent())
          case Post.HTTP404         => Status(404)(play.api.mvc.Results.EmptyContent())
          case r: Post.HTTP422      => Status(422)(play.api.libs.json.Json.toJson(r.body))
          case r: Post.Undocumented => r.result
        }(defaultExecutionContext)
    }

  sealed trait Put extends Product with Serializable
  object Put {
    final case class HTTP200(body: com.nashtech.delivery.v1.models.Delivery) extends Put
    case object HTTP401 extends Put
    case object HTTP404 extends Put
    final case class HTTP422(body: com.nashtech.delivery.v1.models.Error) extends Put
    final case class Undocumented(result: play.api.mvc.Result) extends Put
  }

  def put(
      request: play.api.mvc.Request[com.nashtech.delivery.v1.models.DeliveryForm],
      merchantId: String,
      body: com.nashtech.delivery.v1.models.DeliveryForm
  ): scala.concurrent.Future[Put]
  final def put(merchantId: String): play.api.mvc.Action[com.nashtech.delivery.v1.models.DeliveryForm] =
    Action.async(parse.json[com.nashtech.delivery.v1.models.DeliveryForm]) { request =>
      put(request, merchantId, request.body)
        .map {
          case r: Put.HTTP200      => Status(200)(play.api.libs.json.Json.toJson(r.body))
          case Put.HTTP401         => Status(401)(play.api.mvc.Results.EmptyContent())
          case Put.HTTP404         => Status(404)(play.api.mvc.Results.EmptyContent())
          case r: Put.HTTP422      => Status(422)(play.api.libs.json.Json.toJson(r.body))
          case r: Put.Undocumented => r.result
        }(defaultExecutionContext)
    }

  sealed trait Delete extends Product with Serializable
  object Delete {
    case object HTTP200 extends Delete
    case object HTTP401 extends Delete
    case object HTTP404 extends Delete
    final case class HTTP422(body: com.nashtech.delivery.v1.models.Error) extends Delete
    final case class Undocumented(result: play.api.mvc.Result) extends Delete
  }

  def delete(
      request: play.api.mvc.Request[play.api.mvc.AnyContent],
      merchantId: String
  ): scala.concurrent.Future[Delete]
  final def delete(merchantId: String): play.api.mvc.Action[play.api.mvc.AnyContent] = Action.async { request =>
    delete(request, merchantId)
      .map {
        case Delete.HTTP200         => Status(200)(play.api.mvc.Results.EmptyContent())
        case Delete.HTTP401         => Status(401)(play.api.mvc.Results.EmptyContent())
        case Delete.HTTP404         => Status(404)(play.api.mvc.Results.EmptyContent())
        case r: Delete.HTTP422      => Status(422)(play.api.libs.json.Json.toJson(r.body))
        case r: Delete.Undocumented => r.result
      }(defaultExecutionContext)
  }

}
