/**
  * Generated by API Builder - https://www.apibuilder.io
  * Service version: 1.0.1
  * apibuilder app.apibuilder.io/nashtech/delivery/latest/play_2_6_controllers
  */
package com.nashtech.delivery.v1.controllers

import com.nashtech.delivery.v1.models.json._

trait DeliveriesController extends play.api.mvc.BaseController {

  sealed trait GetById extends Product with Serializable
  object GetById {
    final case class HTTP200(body: com.nashtech.delivery.v1.models.Delivery) extends GetById
    case object HTTP401 extends GetById
    case object HTTP404 extends GetById
    final case class Undocumented(result: play.api.mvc.Result) extends GetById
  }

  def getById(
      request: play.api.mvc.Request[play.api.mvc.AnyContent],
      merchantId: String,
      id: String
  ): scala.concurrent.Future[GetById]
  final def getById(merchantId: String, id: String): play.api.mvc.Action[play.api.mvc.AnyContent] = Action.async {
    request =>
      getById(request, merchantId, id)
        .map {
          case r: GetById.HTTP200      => Status(200)(play.api.libs.json.Json.toJson(r.body))
          case GetById.HTTP401         => Status(401)(play.api.mvc.Results.EmptyContent())
          case GetById.HTTP404         => Status(404)(play.api.mvc.Results.EmptyContent())
          case r: GetById.Undocumented => r.result
        }(defaultExecutionContext)
  }

  sealed trait Post extends Product with Serializable
  object Post {
    final case class HTTP200(body: com.nashtech.delivery.v1.models.Delivery) extends Post
    case object HTTP401 extends Post
    case object HTTP404 extends Post
    final case class HTTP422(body: com.nashtech.delivery.v1.models.Error) extends Post
    final case class Undocumented(result: play.api.mvc.Result) extends Post
  }

  def post(
      request: play.api.mvc.Request[com.nashtech.delivery.v1.models.DeliveryForm],
      merchantId: String,
      body: com.nashtech.delivery.v1.models.DeliveryForm
  ): scala.concurrent.Future[Post]
  final def post(merchantId: String): play.api.mvc.Action[com.nashtech.delivery.v1.models.DeliveryForm] =
    Action.async(parse.json[com.nashtech.delivery.v1.models.DeliveryForm]) { request =>
      post(request, merchantId, request.body)
        .map {
          case r: Post.HTTP200      => Status(200)(play.api.libs.json.Json.toJson(r.body))
          case Post.HTTP401         => Status(401)(play.api.mvc.Results.EmptyContent())
          case Post.HTTP404         => Status(404)(play.api.mvc.Results.EmptyContent())
          case r: Post.HTTP422      => Status(422)(play.api.libs.json.Json.toJson(r.body))
          case r: Post.Undocumented => r.result
        }(defaultExecutionContext)
    }

  sealed trait PutByOrderNumber extends Product with Serializable
  object PutByOrderNumber {
    final case class HTTP200(body: com.nashtech.delivery.v1.models.Delivery) extends PutByOrderNumber
    case object HTTP401 extends PutByOrderNumber
    case object HTTP404 extends PutByOrderNumber
    final case class HTTP422(body: com.nashtech.delivery.v1.models.Error) extends PutByOrderNumber
    final case class Undocumented(result: play.api.mvc.Result) extends PutByOrderNumber
  }

  def putByOrderNumber(
      request: play.api.mvc.Request[com.nashtech.delivery.v1.models.DeliveryForm],
      merchantId: String,
      orderNumber: String,
      body: com.nashtech.delivery.v1.models.DeliveryForm
  ): scala.concurrent.Future[PutByOrderNumber]
  final def putByOrderNumber(
      merchantId: String,
      orderNumber: String
  ): play.api.mvc.Action[com.nashtech.delivery.v1.models.DeliveryForm] =
    Action.async(parse.json[com.nashtech.delivery.v1.models.DeliveryForm]) { request =>
      putByOrderNumber(request, merchantId, orderNumber, request.body)
        .map {
          case r: PutByOrderNumber.HTTP200      => Status(200)(play.api.libs.json.Json.toJson(r.body))
          case PutByOrderNumber.HTTP401         => Status(401)(play.api.mvc.Results.EmptyContent())
          case PutByOrderNumber.HTTP404         => Status(404)(play.api.mvc.Results.EmptyContent())
          case r: PutByOrderNumber.HTTP422      => Status(422)(play.api.libs.json.Json.toJson(r.body))
          case r: PutByOrderNumber.Undocumented => r.result
        }(defaultExecutionContext)
    }

  sealed trait DeleteByOrderNumber extends Product with Serializable
  object DeleteByOrderNumber {
    case object HTTP200 extends DeleteByOrderNumber
    case object HTTP401 extends DeleteByOrderNumber
    case object HTTP404 extends DeleteByOrderNumber
    final case class HTTP422(body: com.nashtech.delivery.v1.models.Error) extends DeleteByOrderNumber
    final case class Undocumented(result: play.api.mvc.Result) extends DeleteByOrderNumber
  }

  def deleteByOrderNumber(
      request: play.api.mvc.Request[play.api.mvc.AnyContent],
      merchantId: String,
      orderNumber: String
  ): scala.concurrent.Future[DeleteByOrderNumber]
  final def deleteByOrderNumber(merchantId: String, orderNumber: String): play.api.mvc.Action[play.api.mvc.AnyContent] =
    Action.async { request =>
      deleteByOrderNumber(request, merchantId, orderNumber)
        .map {
          case DeleteByOrderNumber.HTTP200         => Status(200)(play.api.mvc.Results.EmptyContent())
          case DeleteByOrderNumber.HTTP401         => Status(401)(play.api.mvc.Results.EmptyContent())
          case DeleteByOrderNumber.HTTP404         => Status(404)(play.api.mvc.Results.EmptyContent())
          case r: DeleteByOrderNumber.HTTP422      => Status(422)(play.api.libs.json.Json.toJson(r.body))
          case r: DeleteByOrderNumber.Undocumented => r.result
        }(defaultExecutionContext)
    }

}
